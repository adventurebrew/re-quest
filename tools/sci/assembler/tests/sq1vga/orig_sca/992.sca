.CONFIG
WIDE_EXPORTS = True
LOFSA_RELATIVE = False

.CODE
Cycle::107:
		lap	0x00
		bnt	code_13
		lap	0x01
		aTop	0x08
code_13:
		lag	0x58
		aTop	0x0e
		ldi	0x00
		aTop	0x10
		ret	

Cycle::214:
		push1	
		lsg	0x58
		pToa	0x0e
		sub	
		push	
		callk	Abs, 0x2
		push	
		pushi	0x00d9
		push0	
		pToa	0x08
		send	0x04
		lt?	
		bnt	code_55
		pushi	0x07
		push0	
		pToa	0x08
		send	0x04
		jmp	code_95
code_55:
		lag	0x58
		aTop	0x0e
		pushi	0x11
		push0	
		pToa	0x08
		send	0x04
		push	
		ldi	0x1000
		and	
		bnt	code_84
		pushi	0x07
		push0	
		pToa	0x08
		send	0x04
		jmp	code_95
code_84:
		pushi	0x07
		push0	
		pToa	0x08
		send	0x04
		push	
		pToa	0x0c
		add	
code_95:
		ret	

Cycle::215:
		ret	

Cycle::216:
		pushi	0x00da
		push1	
		push0	
		pToa	0x08
		send	0x06
		pToa	0x10
		bnt	code_128
		push1	
		pTos	0x0a
		callk	IsObject, 0x2
		bnt	code_128
		pushi	0x008b
		push0	
		pToa	0x0a
		send	0x04
code_128:
		pushi	0x6c
		push0	
		self	0x04
		ret	


.CLASS Cycle of 0x0
Function area offset: 0x26
Selectors [9]:
  [0x0] = 0x16
  [0x1] = 0x0
  [0x2] = 0x8000
  [0x17] = {'val': 'Cycle', 'id': 'string_0'}
  [0x2d] = 0x0
  [0x89] = 0x0
  [0xd4] = 0x1
  [0x90] = 0x0
  [0xd5] = 0x0
Overriden functions: 4
  [0x6b]  = Cycle::107   	 ; @0x4
  [0xd6]  = Cycle::214   	 ; @0x16
  [0xd7]  = Cycle::215   	 ; @0x60
  [0xd8]  = Cycle::216   	 ; @0x61

.CODE
Fwd::60:
		link	0x01
		pushi	0x00d6
		push0	
		self	0x04
		sat	0x00
		push	
		pushi	0x00db
		push0	
		pToa	0x08
		send	0x04
		gt?	
		bnt	code_238
		pushi	0x00d7
		push0	
		self	0x04
		jmp	code_247
code_238:
		pushi	0x07
		push1	
		lst	0x00
		pToa	0x08
		send	0x06
code_247:
		ret	

Fwd::215:
		pushi	0x07
		push1	
		push0	
		pToa	0x08
		send	0x06
		ret	

		bnot	

.CLASS Fwd of 0x16
Function area offset: 0x26
Selectors [9]:
  [0x0] = 0x17
  [0x1] = 0x16
  [0x2] = 0x8000
  [0x17] = {'val': 'Fwd', 'id': 'string_1'}
  [0x2d] = 0x0
  [0x89] = 0x0
  [0xd4] = 0x1
  [0x90] = 0x0
  [0xd5] = 0x0
Overriden functions: 2
  [0x3c]  = Fwd::60   	 ; @0xce
  [0xd7]  = Fwd::215   	 ; @0xf8

.CODE
Walk::60:
		link	0x01
		pushi	0x00dc
		push0	
		pToa	0x08
		send	0x04
		not	
		bnt	code_342
		pushi	0x3c
		push0	
		super	0x17, 0x4
code_342:
		ret	

		bnot	

.CLASS Walk of 0x17
Function area offset: 0x26
Selectors [9]:
  [0x0] = 0x18
  [0x1] = 0x17
  [0x2] = 0x8000
  [0x17] = {'val': 'Walk', 'id': 'string_2'}
  [0x2d] = 0x0
  [0x89] = 0x0
  [0xd4] = 0x1
  [0x90] = 0x0
  [0xd5] = 0x0
Overriden functions: 1
  [0x3c]  = Walk::60   	 ; @0x142

.CODE
CT::107:
		link	0x01
		pushi	0x6b
		push1	
		lsp	0x01
		super	0x16, 0x6
		lap	0x03
		aTop	0x0c
		lsp	0x00
		ldi	0x04
		eq?	
		bnt	code_430
		lap	0x04
		aTop	0x0a
code_430:
		pushi	0x00db
		push0	
		pToa	0x08
		send	0x04
		sat	0x00
		lsp	0x02
		gt?	
		bnt	code_451
		lat	0x00
		jmp	code_453
code_451:
		lap	0x02
code_453:
		aTop	0x12
		ret	

CT::60:
		link	0x02
		pushi	0x00db
		push0	
		pToa	0x08
		send	0x04
		sat	0x01
		pTos	0x12
		gt?	
		bnt	code_478
		lat	0x01
		aTop	0x12
code_478:
		pushi	0x00d6
		push0	
		self	0x04
		sat	0x00
		pushi	0x07
		push1	
		push	
		lat	0x01
		gt?	
		bnt	code_501
		ldi	0x00
		jmp	code_516
code_501:
		lst	0x00
		ldi	0x00
		lt?	
		bnt	code_514
		lat	0x01
		jmp	code_516
code_514:
		lat	0x00
code_516:
		push	
		pToa	0x08
		send	0x06
		lsg	0x58
		pToa	0x0e
		eq?	
		bnt	code_548
		pTos	0x12
		pushi	0x07
		push0	
		pToa	0x08
		send	0x04
		eq?	
		bnt	code_548
		pushi	0x00d7
		push0	
		self	0x04
code_548:
		ret	

CT::215:
		ldi	0x01
		aTop	0x10
		pToa	0x0a
		bnt	code_565
		ldi	0x01
		sag	0x25
		jmp	code_571
code_565:
		pushi	0x00d8
		push0	
		self	0x04
code_571:
		ret	


.CLASS CT of 0x16
Function area offset: 0x2a
Selectors [10]:
  [0x0] = 0x19
  [0x1] = 0x16
  [0x2] = 0x8000
  [0x17] = {'val': 'CT', 'id': 'string_3'}
  [0x2d] = 0x0
  [0x89] = 0x0
  [0xd4] = 0x1
  [0x90] = 0x0
  [0xd5] = 0x0
  [0xdd] = 0x0
Overriden functions: 3
  [0x6b]  = CT::107   	 ; @0x194
  [0x3c]  = CT::60   	 ; @0x1c8
  [0xd7]  = CT::215   	 ; @0x225

.CODE
End::107:
		pushi	0x6b
		pushi	0x04
		lsp	0x01
		pushi	0x00db
		push0	
		lap	0x01
		send	0x04
		push	
		push1	
		lsp	0x00
		ldi	0x02
		eq?	
		bnt	code_673
		lap	0x02
		jmp	code_675
code_673:
		ldi	0x00
code_675:
		push	
		super	0x19, 0xc
		ret	


.CLASS End of 0x19
Function area offset: 0x2a
Selectors [10]:
  [0x0] = 0x1a
  [0x1] = 0x19
  [0x2] = 0x8000
  [0x17] = {'val': 'End', 'id': 'string_4'}
  [0x2d] = 0x0
  [0x89] = 0x0
  [0xd4] = 0x1
  [0x90] = 0x0
  [0xd5] = 0x0
  [0xdd] = 0x0
Overriden functions: 1
  [0x6b]  = End::107   	 ; @0x284

.CODE
Beg::107:
		pushi	0x6b
		pushi	0x04
		lsp	0x01
		push0	
		pushi	0xff
		lsp	0x00
		ldi	0x02
		eq?	
		bnt	code_766
		lap	0x02
		jmp	code_768
code_766:
		ldi	0x00
code_768:
		push	
		super	0x19, 0xc
		ret	

		bnot	

.CLASS Beg of 0x19
Function area offset: 0x2a
Selectors [10]:
  [0x0] = 0x1b
  [0x1] = 0x19
  [0x2] = 0x8000
  [0x17] = {'val': 'Beg', 'id': 'string_5'}
  [0x2d] = 0x0
  [0x89] = 0x0
  [0xd4] = 0x1
  [0x90] = 0x0
  [0xd5] = 0x0
  [0xdd] = 0x0
Overriden functions: 1
  [0x6b]  = Beg::107   	 ; @0x2e8

.CODE
SyncWalk::60:
		link	0x01
		push1	
		pushi	0x3b
		push0	
		pToa	0x08
		send	0x04
		sat	0x00
		push	
		callk	IsObject, 0x2
		bnt	code_909
		pushi	0x04
		push0	
		pToa	0x08
		send	0x04
		push	
		pToa	0x12
		ne?	
		bt	code_882
		pushi	0x03
		push0	
		pToa	0x08
		send	0x04
		push	
		pToa	0x14
		ne?	
code_882:
		bnt	code_909
		pushi	0x04
		push0	
		pToa	0x08
		send	0x04
		aTop	0x12
		pushi	0x03
		push0	
		pToa	0x08
		send	0x04
		aTop	0x14
		pushi	0x3c
		push0	
		super	0x17, 0x4
code_909:
		ret	

SyncWalk::214:
		lsg	0x58
		pushi	0x00d9
		push0	
		pToa	0x08
		send	0x04
		add	
		aTop	0x0e
		pushi	0x00d6
		push0	
		super	0x17, 0x4
		ret	

		bnot	

.CLASS SyncWalk of 0x17
Function area offset: 0x2e
Selectors [11]:
  [0x0] = 0x1c
  [0x1] = 0x17
  [0x2] = 0x8000
  [0x17] = {'val': 'SyncWalk', 'id': 'string_6'}
  [0x2d] = 0x0
  [0x89] = 0x0
  [0xd4] = 0x1
  [0x90] = 0x0
  [0xd5] = 0x0
  [0xde] = 0x0
  [0xdf] = 0x0
Overriden functions: 2
  [0x3c]  = SyncWalk::60   	 ; @0x346
  [0xd6]  = SyncWalk::214   	 ; @0x38e

.CODE
Motion::107:
		link	0x04
		lsp	0x00
		ldi	0x01
		ge?	
		bnt	code_1054
		lap	0x01
		aTop	0x08
		lsp	0x00
		ldi	0x02
		ge?	
		bnt	code_1054
		lap	0x02
		aTop	0x0c
		lsp	0x00
		ldi	0x03
		ge?	
		bnt	code_1054
		lap	0x03
		aTop	0x0e
		lsp	0x00
		ldi	0x04
		ge?	
		bnt	code_1054
		lap	0x04
		aTop	0x0a
code_1054:
		ldi	0x00
		aTop	0x20
		aTop	0x22
		aTop	0x24
		lag	0x58
		aTop	0x14
		pushi	0x00da
		push0	
		pToa	0x08
		send	0x04
		sat	0x03
		bnt	code_1087
		pushi	0x0090
		push1	
		pTos	0x14
		send	0x06
code_1087:
		pushi	0x04
		dup	
		push0	
		pToa	0x08
		send	0x04
		sat	0x02
		push	
		pushi	0x03
		push0	
		pToa	0x08
		send	0x04
		sat	0x03
		push	
		pTos	0x0c
		pTos	0x0e
		callk	GetDistance, 0x8
		bnt	code_1140
		pushi	0x00e2
		push1	
		pushi	0x04
		lst	0x02
		lst	0x03
		pTos	0x0c
		pTos	0x0e
		callk	GetAngle, 0x8
		push	
		pToa	0x08
		send	0x06
code_1140:
		push1	
		pushSelf	
		callk	InitBresen, 0x2
		ret	

Motion::225:
		pushi	0x04
		push0	
		pToa	0x08
		send	0x04
		push	
		pToa	0x0c
		eq?	
		bnt	code_1171
		pushi	0x03
		push0	
		pToa	0x08
		send	0x04
		push	
		pToa	0x0e
		eq?	
code_1171:
		ret	

Motion::224:
		lap	0x00
		bnt	code_1185
		lap	0x01
		aTop	0x0c
		lap	0x02
		aTop	0x0e
code_1185:
		ret	

Motion::60:
		link	0x06
		push1	
		lsg	0x58
		pToa	0x14
		sub	
		push	
		callk	Abs, 0x2
		push	
		pushi	0x38
		push0	
		pToa	0x08
		send	0x04
		ge?	
		bnt	code_1219
		lag	0x58
		aTop	0x14
		push1	
		pushSelf	
		callk	DoBresen, 0x2
code_1219:
		ret	

Motion::100:
		ldi	0x01
		aTop	0x20
		pToa	0x0a
		bnt	code_1236
		ldi	0x01
		sag	0x25
		jmp	code_1242
code_1236:
		pushi	0x00d8
		push0	
		self	0x04
code_1242:
		ret	

Motion::216:
		pushi	0x3b
		push1	
		push0	
		pToa	0x08
		send	0x06
		pToa	0x20
		bnt	code_1273
		push1	
		pTos	0x0a
		callk	IsObject, 0x2
		bnt	code_1273
		pushi	0x008b
		push0	
		pToa	0x0a
		send	0x04
code_1273:
		pushi	0x6c
		push0	
		self	0x04
		ret	

		bnot	

.CLASS Motion of 0x0
Function area offset: 0x4e
Selectors [19]:
  [0x0] = 0x1d
  [0x1] = 0x0
  [0x2] = 0x8000
  [0x17] = {'val': 'Motion', 'id': 'string_7'}
  [0x2d] = 0x0
  [0x89] = 0x0
  [0x4] = 0x0
  [0x3] = 0x0
  [0x2e] = 0x0
  [0x2f] = 0x0
  [0x30] = 0x0
  [0x31] = 0x0
  [0x32] = 0x0
  [0x33] = 0x0
  [0x34] = 0x0
  [0x35] = 0x0
  [0xd5] = 0x0
  [0xde] = 0x0
  [0xdf] = 0x0
Overriden functions: 6
  [0x6b]  = Motion::107   	 ; @0x3ec
  [0x3c]  = Motion::60   	 ; @0x4a2
  [0x64]  = Motion::100   	 ; @0x4c4
  [0xe0]  = Motion::224   	 ; @0x494
  [0xe1]  = Motion::225   	 ; @0x47a
  [0xd8]  = Motion::216   	 ; @0x4db

.CODE
MoveTo::107:
		pushi	0x6b
		push0	
		rest	0x01
		super	0x1d, 0x4
		ret	

MoveTo::225:
		push1	
		pushi	0x04
		push0	
		pToa	0x08
		send	0x04
		push	
		pToa	0x0c
		sub	
		push	
		callk	Abs, 0x2
		push	
		pushi	0x36
		push0	
		pToa	0x08
		send	0x04
		le?	
		bnt	code_1462
		push1	
		pushi	0x03
		push0	
		pToa	0x08
		send	0x04
		push	
		pToa	0x0e
		sub	
		push	
		callk	Abs, 0x2
		push	
		pushi	0x37
		push0	
		pToa	0x08
		send	0x04
		le?	
code_1462:
		ret	

		bnot	

.CLASS MoveTo of 0x1d
Function area offset: 0x4e
Selectors [19]:
  [0x0] = 0x1e
  [0x1] = 0x1d
  [0x2] = 0x8000
  [0x17] = {'val': 'MoveTo', 'id': 'string_8'}
  [0x2d] = 0x0
  [0x89] = 0x0
  [0x4] = 0x0
  [0x3] = 0x0
  [0x2e] = 0x0
  [0x2f] = 0x0
  [0x30] = 0x0
  [0x31] = 0x0
  [0x32] = 0x0
  [0x33] = 0x0
  [0x34] = 0x0
  [0x35] = 0x0
  [0xd5] = 0x0
  [0xde] = 0x0
  [0xdf] = 0x0
Overriden functions: 2
  [0x6b]  = MoveTo::107   	 ; @0x578
  [0xe1]  = MoveTo::225   	 ; @0x581

.STRINGS
string_0: "Cycle"		 ; special
string_1: "Fwd"		 ; special
string_2: "Walk"		 ; special
string_3: "CT"		 ; special
string_4: "End"		 ; special
string_5: "Beg"		 ; special
string_6: "SyncWalk"		 ; special
string_7: "Motion"		 ; special
string_8: "MoveTo"		 ; special
string_unused_9: ""
string_unused_10: ""


.RELOCATION
 ; This section is automatically created on assembling, regardless of the content written here
 ; the following is only for informative purposes
num of pointers: 9
; CLASS Cycle of 0x0 selector #3
; CLASS Fwd of 0x16 selector #3
; CLASS Walk of 0x17 selector #3
; CLASS CT of 0x16 selector #3
; CLASS End of 0x19 selector #3
; CLASS Beg of 0x19 selector #3
; CLASS SyncWalk of 0x17 selector #3
; CLASS Motion of 0x0 selector #3
; CLASS MoveTo of 0x1d selector #3
